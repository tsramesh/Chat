#include "poll.h"

// Function to set socket to non-blocking mode
int set_non_blocking(int socket_fd) {
    int flags = fcntl(socket_fd, F_GETFL, 0);
    CHECK(flags, "fcntl(F_GETFL) failed", (void)0, CRITICAL_ERROR);
    CHECK(fcntl(socket_fd, F_SETFL, flags | O_NONBLOCK), "fcntl(F_SETFL) failed", (void)0, CRITICAL_ERROR);
    return 0;
}

// Function to handle new client connections
void poll_newconn(int server_fd, int poll_fd) {
    struct sockaddr_in client_address;
    socklen_t client_len = sizeof(client_address);
    int client_fd = accept(server_fd, (struct sockaddr *)&client_address, &client_len);
    CHECK(client_fd, "Accept failed", (void)0, CRITICAL_ERROR);

    // Set client socket to non-blocking
    set_non_blocking(client_fd);

    // Add client socket to poll
    ADD_TO_POLL(poll_fd, client_fd);
    printf("New client connected: %d\n", client_fd);
}

// Function to handle data from an existing client
void poll_data(int poll_fd, int client_fd) {
    unsigned char *buffer = 0;
    size_t bytes_read = 0;
    read_data( client_fd, &buffer, &bytes_read, server);

    if (bytes_read <= 0) {
        // Client disconnected or error
        printf("Client disconnected: %d\n", client_fd);
        REMOVE_FROM_POLL(poll_fd, client_fd);
        close(client_fd);
    } else {
        // Data received, echo back
        write_data( client_fd, buffer, bytes_read, server);
        epoll_ctl(epoll_fd, EPOLL_CTL_DEL, ev_data->fd, NULL);
        printf("Received: %s\n", buffer);

        // Free the memory allocated by read_data API
        free(buffer);
    }
}

// Centralized event processing logic
void poll_events(int server_fd, int poll_fd, void *events, int num_events) {
    printf("Value of num_events: %d\n", num_events);
    for (int i = 0; i < num_events; i++) {
        int fd = GET_EVENT_FD(events, i);
        if (fd == server_fd && server) {
            poll_newconn(server_fd, poll_fd);  // New client connection
        } else {
            poll_data(poll_fd, fd);  // Data from existing client
        }
    }
}

// Main server loop to accept connections and handle events
void * poll_loop(void * fd) {
    int sockfd = *((int *)fd);

    // Setup the polling mechanism (epoll on Linux, kqueue on BSD)
    int poll_fd = SETUP_POLL();

    // Add the server socket to the poll
    ADD_TO_POLL(poll_fd, sockfd);

    EVENT_ARRAY(events, 10); // Platform-specific event array
    int num_events;

    while (Alive) { // Use the volatile flag to control the loop
        // Wait for events (using the unified WAIT_ON_POLL macro)
        num_events = WAIT_ON_POLL(poll_fd, events, 10, -1);
        CHECK(num_events, "Poll wait failed", (void)0, CRITICAL_ERROR);

        // Process the events
        poll_events(sockfd, poll_fd, events, num_events);
    }

    printf("Process loop has been terminated.\n");
    close(poll_fd);
    return NULL;
}
